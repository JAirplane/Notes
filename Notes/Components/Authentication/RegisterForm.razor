@inject IJSRuntime JSRuntime
@inject NavigationManager navManager

<div class="login-form">
	<EditForm Model="userData" OnValidSubmit="SendUserData">
		<DataAnnotationsValidator />
		<h2 class="text-center">@FormHeader</h2>
		<div class="form-group">
			<InputText class="form-control" placeholder="@LoginPlaceholder" @bind-Value="userData.LoginInput" />
			<ValidationMessage For="(() => userData.LoginInput)" />
		</div>
		<div class="form-group">
			<InputText type="password" class="form-control" placeholder="@PasswordPlaceholder" @bind-Value="userData.PasswordInput" />
			<ValidationMessage For="(() => userData.PasswordInput)" />
		</div>
		<div class="form-group">
			<InputText type="password" class="form-control" placeholder="@PasswordConfirmPlaceholder" @bind-Value="userData.PasswordConfirmInput" />
			<ValidationMessage For="(() => userData.PasswordConfirmInput)" />
		</div>
		<div class="form-group">
			<InputText class="form-control" placeholder="@NamePlaceholder" @bind-Value="userData.Name" />
			<ValidationMessage For="(() => userData.Name)" />
		</div>
		<div class="form-group">
			<InputText class="form-control" placeholder="@SurnamePlaceholder" @bind-Value="userData.Surname" />
			<ValidationMessage For="(() => userData.Surname)" />
		</div>
		<div class="form-group">
			<InputText class="form-control" placeholder="@EmailPlaceholder" @bind-Value="userData.Email" />
			<ValidationMessage For="(() => userData.Email)" />
		</div>
		<div class="form-group">
			<label for="phone-mask">@PhoneLabelPlaceholder</label>
			<InputText class="form-control" id="phone-mask" placeholder="@PhoneMaskPlaceholder" @bind-Value="userData.Phone" />
			<ValidationMessage For="(() => userData.Phone)" />
		</div>
		<div class="form-group">
			<button type="submit" class="btn btn-primary btn-block">@ButtonTitle</button>
		</div>
		@if(userExistanceChecked)
		{
			if (!loginIsUnique || !emailIsUnique)
			{
				<div class="container">
					<div class="row text-center">
						<div class="col">
							<span class="text-danger">@UserExistedMessage</span>
						</div>
					</div>
				</div>
			}
		}
	</EditForm>
	<p class="text-center">@BottomLinkText
		<a href=@BottomLink>@BottomLinkTitle</a>
	</p>
</div>

@code {
	[Parameter]
	public string FormHeader { get; set; } = "Create an account";
	[Parameter]
	public string LoginPlaceholder { get; set; } = "Login";
	[Parameter]
	public string PasswordPlaceholder { get; set; } = "Password";
	[Parameter]
	public string PasswordConfirmPlaceholder { get; set; } = "Confirm password";
	[Parameter]
	public string NamePlaceholder { get; set; } = "Your name";
	[Parameter]
	public string SurnamePlaceholder { get; set; } = "Your surname";
	[Parameter]
	public string EmailPlaceholder { get; set; } = "Email";
	[Parameter]
	public string PhoneLabelPlaceholder { get; set; } = "Phone number";
	[Parameter]
	public string PhoneMaskPlaceholder { get; set; } = "+7(999)999-99-99";
	[Parameter]
	public string ButtonTitle { get; set; } = "Submit";
	[Parameter]
	public string BottomLinkText { get; set; } = "Already have an account? ";
	[Parameter]
	public string BottomLink { get; set; } = "/";
	[Parameter]
	public string BottomLinkTitle { get; set; } = "Sign in";

	[Parameter]
	public string LoginAlreadyExistMessage { get; set; } = "Account with this Login already exist";
	[Parameter]
	public string EmailAlreadyExistMessage { get; set; } = "This Email already registered";

	private RegistrationFormFields userData = new();
	private Registration registration = new();
	private bool userExistanceChecked;
	private bool loginIsUnique;
	private bool emailIsUnique;
	private string UserExistedMessage { get; set; } = string.Empty;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await JSRuntime.InvokeVoidAsync("masks");
		}
	}
	public void SetRegistrationData()
	{
		registration.NewUser.Сredentials.LoginInput = userData.LoginInput;
		registration.NewUser.Сredentials.PasswordInput = userData.PasswordInput;
		registration.NewUser.Name = userData.Name;
		registration.NewUser.Surname = userData.Surname;
		registration.NewUser.Email = userData.Email;
		registration.NewUser.Phone = userData.Phone;
	}
	virtual public void SendUserData()
	{
		SetRegistrationData();
		loginIsUnique = registration.LoginIsUnique();
		if(!loginIsUnique)
		{
			UserExistedMessage = LoginAlreadyExistMessage;
			userExistanceChecked = true;
			return;
		}
		emailIsUnique = registration.EmailIsUnique();
		if(!emailIsUnique)
		{
			UserExistedMessage = EmailAlreadyExistMessage;
			userExistanceChecked = true;
			return;
		}
		var userCreated = registration.AddNewUser();
		if(!userCreated)
		{
			Console.WriteLine("user creation failed");
			//TODO: log error
		}
		navManager.NavigateTo("/");
	}
}
