@using System.ComponentModel.DataAnnotations;

@inject NavigationManager navManager
@inject UserAuthenticationState authState
@inject AuthenticatedUserHandler_VM handler_VM

<div class="login-form">
	<EditForm Model=@Credentials OnValidSubmit="SendCredentials">
		<DataAnnotationsValidator />
		<h2 class="text-center">@FormHeader</h2>
		<div class="form-group">
			<InputText class="form-control" placeholder="@LoginPlaceholder" @bind-Value="Credentials.LoginInput" />
			<ValidationMessage For="(() => Credentials.LoginInput)" />
		</div>
		<div class="form-group">
			<InputText type="password" class="form-control" placeholder="@PasswordPlaceholder" @bind-Value="Credentials.PasswordInput" />
			<ValidationMessage For="(() => Credentials.PasswordInput)" />
		</div>
		<div class="form-group">
			<button type="submit" class="btn btn-primary btn-block">@ButtonTitle</button>
		</div>
		<div class="clearfix">
			<a href="/resetpassword" class="float-right">Forgot Password?</a>
		</div>
		@if (credentialsChecked)
		{
			@if (authorization.ValidLogin)
			{
				@if (authorization.ValidPassword)
				{
					authState.UserLoggedIn = true;
					handler_VM.SetUser(authorization.ValidUser?.Id ?? -1);
					navManager.NavigateTo("/main");
				}
				else
				{
					<div class="container">
						<div class="row text-center">
							<div class="col">
								<span class="text-danger">@InvalidPasswordMessage</span>
							</div>
						</div>
					</div>
				}
			}
			else
			{
				<div class="container">
					<div class="row text-center">
						<div class="col">
							<span class="text-danger">@InvalidLoginMessage</span>
						</div>
					</div>
				</div>
			}
		}
	</EditForm>
	<p class="text-center ">@BottomLinkText
		<a href="@BottomLink">@BottomLinkTitle</a>
	</p>
</div>

@code {
	[Parameter]
	public string FormHeader { get; set; } = "Login";
	[Parameter]
	public string LoginPlaceholder { get; set; } = "Username";
	[Parameter]
	public string PasswordPlaceholder { get; set; } = "Password";
	[Parameter]
	public string ButtonTitle { get; set; } = "Sign in";
	[Parameter]
	public string BottomLinkText { get; set; } = "Don't have an account?";
	[Parameter]
	public string BottomLink { get; set; } = "/register";
	[Parameter]
	public string BottomLinkTitle { get; set; } = "Create an Account";

	[Parameter]
	public string InvalidPasswordMessage { get; set; } = "Wrong password, please try again.";
	[Parameter]
	public string InvalidLoginMessage { get; set; } = "User with this credentials does not exist.";

	//cannot use Credentials_VM from Authorization class due to validation limitation
	private Credentials_View Credentials { get; set; } = new();
	private Authorization authorization = new();
	private bool credentialsChecked;

	virtual public void SendCredentials()
	{
		SetAuthorizationData();
		authorization.CheckUser();
		credentialsChecked = true;
	}
	public void SetAuthorizationData()
	{
		authorization.CredentialsVM.LoginInput = Credentials.LoginInput;
		authorization.CredentialsVM.PasswordInput = Credentials.PasswordInput;
	}
}
