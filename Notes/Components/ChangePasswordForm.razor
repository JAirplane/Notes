@inject NavigationManager navManager

<div class="login-form">
	<EditForm Model="changePasswordValidationFields" OnValidSubmit=ChangePasswordAsync>
		<DataAnnotationsValidator />
		<h2 class="text-center">@FormHeader</h2>
		<div class="form-group">
			<InputText type="password" class="form-control" placeholder="@PasswordPlaceholder" @bind-Value="changePasswordValidationFields.PasswordInput" />
			<ValidationMessage For="(() => changePasswordValidationFields.PasswordInput)" />
		</div>
		<div class="form-group">
			<InputText type="password" class="form-control" placeholder="@PasswordConfirmPlaceholder" @bind-Value="changePasswordValidationFields.PasswordConfirmInput" />
			<ValidationMessage For="(() => changePasswordValidationFields.PasswordConfirmInput)" />
		</div>
		<div class="form-group">
			<button type="submit" class="btn btn-primary btn-block">@ButtonTitle</button>
		</div>
	</EditForm>
</div>

@code {
	[Parameter]
	public string FormHeader { get; set; } = "Change password";
	[Parameter]
	public string PasswordPlaceholder { get; set; } = "New password";
	[Parameter]
	public string PasswordConfirmPlaceholder { get; set; } = "Confirm password";
	[Parameter]
	public string ButtonTitle { get; set; } = "Submit";

	[Parameter]
	public int UserId { get; set; }

	private ChangePasswordFields changePasswordValidationFields = new();
	private ChangePassword_VM changePassword_VM = new();

	private void SetVMData()
	{
		changePassword_VM.UserId = UserId;
		changePassword_VM.NewPassword = changePasswordValidationFields.PasswordInput;
	}
	virtual public async void ChangePasswordAsync()
	{
		SetVMData();
		await changePassword_VM.SetNewPasswordAsync();
		navManager.NavigateTo("/");
	}
	
}
