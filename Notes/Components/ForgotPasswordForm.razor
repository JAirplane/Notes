@using System.ComponentModel.DataAnnotations

<div class="login-form">
	<EditForm Model=@reset OnValidSubmit="SendEmail">
		<DataAnnotationsValidator />
		<h2 class="text-center">@EmailFormHeader</h2>
		<div>
			<p>@EmailFormMessage</p>
		</div>
		<div class="form-group">
			<label for="email-send">Email</label>
			<InputText class="form-control" id="email-send" placeholder="@EmailPlaceholder" @bind-Value="reset.Email" />
			<ValidationMessage For="(() => reset.Email)" />
		</div>
		<div class="form-group">
			<button type="submit" class="btn btn-primary btn-block">@EmailFormButtonTitle</button>
		</div>
		@if(userExistanceChecked && !passwordChange.UserFound)
		{
			<div class="container">
				<div class="row text-center">
					<div class="col">
						<span class="text-danger">@EmailNotFoundMessage</span>
					</div>
				</div>
			</div>
		}
	</EditForm>
</div>


@code {
	[Parameter]
	public string EmailFormHeader { get; set; } = "Password Reset";
	[Parameter]
	public string EmailFormMessage { get; set; } = "Enter the email address associated with your account and we'll send you a code to reset your password.";
	[Parameter]
	public string EmailPlaceholder { get; set; } = "example@domain.com";
	[Parameter]
	public string EmailFormButtonTitle { get; set; } = "Submit";
	[Parameter]
	public string EmailNotFoundMessage { get; set; } = "User with this Email not found";

	[Parameter]
	public EventCallback<bool> OnEmailSent { get; set; }
	private PasswordResetEmail reset = new();
	private PasswordChange passwordChange = new();
	private bool userExistanceChecked;

	virtual public void SendEmail()
	{
		SetEmail();
		passwordChange.FindUserByEmail();
		userExistanceChecked = true;
		if(passwordChange.UserFound)
		{
			//TODO: Send email
			OnEmailSent.InvokeAsync();
		}
	}
	virtual public void SetEmail()
	{
		passwordChange.Email = reset.Email;
	}
}
