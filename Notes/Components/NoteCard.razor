
<div class="note" @onclick=@(() => OnShowModalStateChanged(true))>
	<div class="note-header text-center">
		<span>@cardHeader</span>
	</div>
	<hr class="note-hr" />
	<div class="note-body">
		<div class=@CardTextCSSClass>
			<span>@cardText</span>
		</div>
		@if (timeToRemind is not null)
		{
			<div class="card-remind">
				<hr class="note-hr" />
				<span class=@RemindStaleTextColorCSSClass>@RemindMessage @timeToRemind.ToString()</span>
			</div>
		}
	</div>
	<hr class="note-hr"/>
	<div class="note-footer">
		<div class="note-footer-tags">
			@foreach (var tag in Note?.NoteTags ?? [])
			{
				if (ChildContent is not null)
				{
					@ChildContent(tag.TagName)
				}
				else
				{
					<a href="/search/@tag.TagName.TrimStart('#')" class="badge fst-italic">@tag.TagName</a>
				}
			}
		</div>
		<div class="text-center">
			<div class="btn-group my-1" role="group">
				<button type="button" class="btn card-btn btn-outline-info" @onclick=@(() => OnEditTagsModalStateChanged(true))>
					<i class="fa-solid fa-hashtag" />
				</button>
				<button type="button" class="btn card-btn btn-outline-info" @onclick=@(() => OnEditModalStateChanged(true))>
					<i class="fa-solid fa-pen-to-square" />
				</button>
				<button type="button" class="btn card-btn btn-outline-danger" @onclick=@(() => OnDeleteModalStateChanged(true))>
					<i class="fa-solid fa-trash-can" />
				</button>
			</div>
		</div>
	</div>
</div>

@if (EditModalIsOpen)
{
	ShowModalIsOpen = false;
	<CardStateChangeModal ModalTitle=@ModalWindowTitle NoteHeader=@cardHeader NoteText=@cardText OnClose="OnEditModalStateChanged"
						  OnSaveChanges="OnSaveChangesHandler" RemindTime=@timeToRemind ShowRemindTimeInfoMessage=@ShowRemindTimeInfoMessageDuringEdit />
}
else if (DeleteModalIsOpen)
{
	ShowModalIsOpen = false;
	<ConfirmModalWindow OnClose="OnDeleteModalStateChanged" OnConfirm="(() => OnDeleteNote.InvokeAsync(Note?.Id ?? 0))" />
}
else if (TagEditionModalIsOpen)
{
	ShowModalIsOpen = false;
	<EditNoteTagsModal OnClose="OnEditTagsModalStateChanged" OnConfirm="CreateAndAddNewTag" OnChoiceMade="AddExistingTagToNote"
			OnSearchHandler="OnTagsSearch" NoteTags=@Note?.NoteTags OnTagUnbind="UnbindTag" />
}
else if (ShowModalIsOpen)
{
	<ShowCardModalWindow NoteHeader=@cardHeader NoteText=@cardText NoteTags=@Note?.NoteTags OnClose="OnShowModalStateChanged"
						 RemindTime="timeToRemind" RemindTextCSSClass=@RemindStaleTextColorCSSClass />
}


@code {
	[Parameter]
	public Note_VM? Note { get; set; }
	[Parameter]
	public string ModalWindowTitle { get; set; } = "Edit note";
	//for note use default value, for reminder use "reminder-text" instead
	[Parameter]
	public string CardTextCSSClass { get; set; } = "note-text";
	[Parameter]
	public string RemindStaleTextColorCSSClass { get; set; } = string.Empty;
	[Parameter]
	public string RemindMessage { get; set; } = "Notification at: ";
	[Parameter]
	public RenderFragment<string>? ChildContent { get; set; }
	[Parameter]
	public Func<int, NoteContent, bool>? OnEditNote { get; set; }
	[Parameter]
	public EventCallback<int> OnDeleteNote { get; set; }
	[Parameter]
	public EventCallback OnParentStateHasChanged { get; set; }

	[Parameter]
	public Func<string, IEnumerable<Tag_VM>>? OnTagsSearchHandler { get; set; }
	[Parameter]
	public Func<string, Tag_VM?>? OnCreateNewTag { get; set; }
	[Parameter]
	public Action<int, int>? OnAddExistingTag { get; set; }
	[Parameter]
	public Action<int, int>? OnRemoveTag { get; set; }

	private string cardHeader = string.Empty;
	private string cardText = string.Empty;
	private DateTime? timeToRemind;
	private bool EditModalIsOpen { get; set; }
	private bool ShowModalIsOpen { get; set; }
	private bool DeleteModalIsOpen { get; set; }
	private bool TagEditionModalIsOpen { get; set; }
	private bool ShowRemindTimeInfoMessageDuringEdit { get; set; }

	protected override void OnParametersSet()
	{
		base.OnParametersSet();
		cardHeader = Note?.Header ?? string.Empty;
		cardText = Note?.Body ?? string.Empty;
		timeToRemind = (Note as Reminder_VM)?.RemindTime;

		if(Note is not Reminder_VM)
		{
			ShowRemindTimeInfoMessageDuringEdit = true;
		}

		if (timeToRemind is not null && timeToRemind > DateTime.Now)
		{
			RemindStaleTextColorCSSClass = string.Empty;
		}
	}
	virtual public void OnSaveChangesHandler(NoteContent content)
	{
		if(Note is not null)
		{
			OnEditNote?.Invoke(Note.Id, content);
			if (content.RemindDateTime is not null)
			{
				timeToRemind = content.RemindDateTime;
			}
		}
		OnEditModalStateChanged(false);
		OnParentStateHasChanged.InvokeAsync();
	}
	public void CreateAndAddNewTag(string tagName)
	{
		var newTag = OnCreateNewTag?.Invoke(tagName); //creates and adds new tag to all user tags collection
		if(Note is null)
		{
			//TODO: to log
			return;
		}
		if(newTag is null)
		{
			//TODO: to log
			return;
		}
		OnAddExistingTag?.Invoke(Note.Id, newTag.Id);
	}
	public void AddExistingTagToNote(Tag_VM? tag)
	{
		if (tag is not null && Note is not null)
		{
			OnAddExistingTag?.Invoke(Note.Id, tag.Id);
		}
	}
	public void UnbindTag(Tag_VM tag)
	{
		if (Note is null)
		{
			//TODO: to log
			return;
		}
		if (tag is null)
		{
			//TODO: to log
			return;
		}
		OnRemoveTag?.Invoke(Note.Id, tag.Id);
	}
	public IEnumerable<Tag_VM> OnTagsSearch(string tagName)
	{
		if(OnTagsSearchHandler is not null)
		{
			return OnTagsSearchHandler.Invoke(tagName);
		}
		else
		{
			return [];
		}
	}
	private void OnEditModalStateChanged(bool state)
	{
		EditModalIsOpen = state;
		StateHasChanged();
	}
	private void OnShowModalStateChanged(bool state)
	{
		ShowModalIsOpen = state;
		StateHasChanged();
	}
	private void OnDeleteModalStateChanged(bool state)
	{
		DeleteModalIsOpen = state;
		StateHasChanged();
	}
	private void OnEditTagsModalStateChanged(bool state)
	{
		TagEditionModalIsOpen = state;
		StateHasChanged();
	}
}
