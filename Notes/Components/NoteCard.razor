
<div class="note" @onclick=@(() => OnShowModalStateChanged(true))>
	<div class="note-header text-center">
		<span>@CardHeader</span>
	</div>
	<hr class="note-hr" />
	<div class="note-body">
		<span>@CardText</span>
	</div>
	<hr class="note-hr"/>
	<div class="note-footer">
		<div class="note-footer-tags">
			@foreach (var tag in Tags ?? [])
			{
				if (ChildContent is not null)
				{
					@ChildContent(tag.TagName)
				}
				else
				{
					<a href="#" class="badge fst-italic">@tag.TagName</a>
				}
			}
		</div>
		<div class="text-center">
			<div class="btn-group my-1" role="group">
				<button type="button" class="btn card-btn btn-outline-info" @onclick=@(() => OnEditTagsModalStateChanged(true))>
					<i class="fa-solid fa-hashtag" />
				</button>
				<button type="button" class="btn card-btn btn-outline-info" @onclick=@(() => OnEditModalStateChanged(true))>
					<i class="fa-solid fa-pen-to-square" />
				</button>
				<button type="button" class="btn card-btn btn-outline-danger" @onclick=@(() => OnDeleteModalStateChanged(true))>
					<i class="fa-solid fa-trash-can" />
				</button>
			</div>
		</div>
	</div>
</div>

@if (EditModalIsOpen)
{
	ShowModalIsOpen = false;
	<CardStateChangeModal ModalTitle=@ModalWindowTitle NoteHeader=@CardHeader NoteText=@CardText OnClose="OnEditModalStateChanged" OnSaveChanges="OnSaveChangesHandler" />
}
else if (DeleteModalIsOpen)
{
	ShowModalIsOpen = false;
	<ConfirmModalWindow OnClose="OnDeleteModalStateChanged" OnConfirm="(() => OnDeleteNote.InvokeAsync(NoteId))" />
}
else if (TagEditionModalIsOpen)
{
	ShowModalIsOpen = false;
	<EditNoteTagsModal OnClose="OnEditTagsModalStateChanged" OnConfirm="CreateAndAddNewTag" OnChoiceMade="AddExistedTagToNote" OnSearchHandler="OnTagsSearch" />
}
else if (ShowModalIsOpen)
{
	<ShowCardModalWindow NoteHeader=@CardHeader NoteText=@CardText NoteTags="Tags" OnClose="OnShowModalStateChanged" />
}


@code {
	[Parameter]
	public int NoteId { get; set; }
	[Parameter]
	public string ModalWindowTitle { get; set; } = "Edit note";
	[Parameter]
	public string CardHeader { get; set; } = string.Empty;
	[Parameter]
	public string CardText { get; set; } = string.Empty;
	[Parameter]
	public HashSet<Tag_VM>? Tags { get; set; }
	[Parameter]
	public RenderFragment<string>? ChildContent { get; set; }
	[Parameter]
	public EventCallback OnEditNote { get; set; }
	[Parameter]
	public EventCallback<int> OnDeleteNote { get; set; }

	[Parameter]
	public Func<string, IEnumerable<Tag_VM>>? OnTagsSearchHandler { get; set; }
	[Parameter]
	public Func<string, Tag_VM?>? OnCreateNewTag { get; set; }

	private bool EditModalIsOpen { get; set; }
	private bool ShowModalIsOpen { get; set; }
	private bool DeleteModalIsOpen { get; set; }
	private bool TagEditionModalIsOpen { get; set; }


	virtual public void OnSaveChangesHandler(NoteContent content)
	{
		CardHeader = content.NoteHeader;
		CardText = content.NoteText;
		OnEditModalStateChanged(false);
	}
	public void CreateAndAddNewTag(string tagName)
	{
		var newTag = OnCreateNewTag?.Invoke(tagName); //creates and adds new tag to all user tags collection
		if(newTag is not null)
		{
			Tags?.Add(newTag); //adds created tag to list of this particular note collection
		}
	}
	public IEnumerable<Tag_VM> OnTagsSearch(string tagName)
	{
		if(OnTagsSearchHandler is not null)
		{
			return OnTagsSearchHandler.Invoke(tagName);
		}
		else
		{
			return [];
		}
	}
	private void AddExistedTagToNote(Tag_VM tag)
	{
		Tags?.Add(tag);
	}
	private void OnEditModalStateChanged(bool state)
	{
		EditModalIsOpen = state;
		StateHasChanged();
	}
	private void OnShowModalStateChanged(bool state)
	{
		ShowModalIsOpen = state;
		StateHasChanged();
	}
	private void OnDeleteModalStateChanged(bool state)
	{
		DeleteModalIsOpen = state;
		StateHasChanged();
	}
	private void OnEditTagsModalStateChanged(bool state)
	{
		TagEditionModalIsOpen = state;
		StateHasChanged();
	}
}
