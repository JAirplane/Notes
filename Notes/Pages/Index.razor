@page "/main"
@inject UserAuthenticationState authState

<PageTitle>Index</PageTitle>

@if(!authState.UserLoggedIn)
{
	<NotAuthorizedForm />
}
else
{
	<CreateNote ModalWindowTitle=@CreateNoteModalWindowTitle OnCreate="handler_VM.AddNewNote" OnParentStateHasChanged="StateHasChanged" />

	<h1 class="text-center">Your notes</h1>
	<div class="note-container">
			@foreach(Note_VM note in handler_VM.GetUserNotes() ?? [])
			{
				<NoteCard Note="note" OnEditNote="handler_VM.UpdateNoteData" OnDeleteNote="handler_VM.DeleteUserNote" OnTagsSearchHandler="handler_VM.GetUserTagsByTagName"
					OnCreateNewTag="handler_VM.AddNewTag" OnAddExistingTag="handler_VM.AddExistingTagToNote" OnRemoveTag="handler_VM.RemoveExistingTagFromNote"
					OnParentStateHasChanged="StateHasChanged"/>
			}
	</div>
}


@code{
	[CascadingParameter]
	public MainLayout? mainLayout { get; set; }

	private AuthenticatedUserHandler_VM? _handler_VM;
	[Inject]
	public AuthenticatedUserHandler_VM handler_VM
	{
		get => _handler_VM ?? throw new Exception("AuthenticatedUserHandler_VM is null");
		set => _handler_VM = value ?? throw new Exception("AuthenticatedUserHandler_VM is null");
	}

	public string CreateNoteModalWindowTitle { get; set; } = "Create note";
}
