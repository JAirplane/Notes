@page "/reminders"
@inject UserAuthenticationState authState

<PageTitle>Reminders</PageTitle>

@if (!authState.UserLoggedIn)
{
	<NotAuthorizedForm />
}
else
{
	<CreateNote ModalWindowTitle=@CreateNoteModalWindowTitle OnCreate="handler_VM.AddNewNote" />

	<h1 class="text-center">Your notes</h1>
	<div class="note-container">
		@foreach (Reminder_VM reminder in handler_VM.GetUserReminders() ?? [])
		{
			<NoteCard Note="reminder" OnEditNote="handler_VM.UpdateNoteData" OnDeleteNote="handler_VM.DeleteUserNote" OnTagsSearchHandler="handler_VM.GetUserTagsByTagName"
					  OnCreateNewTag="handler_VM.AddNewTag" OnAddExistingTag="handler_VM.AddExistingTagToNote" OnRemoveTag="handler_VM.RemoveExistingTagFromNote"
					  CardTextCSSClass="reminder-text" RemindStaleTextColorCSSClass="text-red" OnParentStateHasChanged="StateHasChanged" />
		}
	</div>
}

@code {
	private AuthenticatedUserHandler_VM? _handler_VM;
	[Inject]
	public AuthenticatedUserHandler_VM handler_VM
	{
		get => _handler_VM ?? throw new Exception("AuthenticatedUserHandler_VM is null");
		set => _handler_VM = value ?? throw new Exception("AuthenticatedUserHandler_VM is null");
	}

	public string CreateNoteModalWindowTitle { get; set; } = "Create reminder";
}
