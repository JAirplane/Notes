@inherits LayoutComponentBase

@inject UserState authState
@inject NavigationManager navManager
@inject NotificationManager tokenSources

<PageTitle>Notes</PageTitle>

<CascadingValue Value="this">
	<div class="page">
		<div class="sidebar">
			<NavMenu />
		</div>

		<main>
			<div class="top-row px-4">
				<button class="btn btn-outline-secondary" @onclick="SignOut">Sign out</button>
			</div>

			<article class="content px-4">
				@Body
			</article>
		</main>
	</div>
	<Notification @ref=notification NotificationPermitted=@authState.NotificationPermission />
</CascadingValue>

@code{
	private Notification? notification;
	private AuthenticatedUserHandler_VM? _handler_VM;
	[Inject]
	public AuthenticatedUserHandler_VM handler_VM
	{
		get => _handler_VM ?? throw new Exception("AuthenticatedUserHandler_VM is null");
		set => _handler_VM = value ?? throw new Exception("AuthenticatedUserHandler_VM is null");
	}
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			handler_VM.RunNotification = RunNotification;
			await RunAllNotifications();
		}
	}
	public void SignOut()
	{
		authState.UserLoggedIn = false;
		handler_VM.NullifyUser();
		navManager.NavigateTo("/");
	}
	public async Task RunNotification(Reminder_VM reminder)
	{
		if (reminder is null) return;
		if (reminder.RemindTime < DateTime.Now) return;
		var timeDiff = reminder.RemindTime - DateTime.Now;
		//delayed by timeDiff
		CancellationTokenSource tokenSource = new();
		tokenSources.AddTokenSource(reminder.Id, tokenSource);
		if(notification is not null)
		{
			await notification.ShowSimpeNotification(reminder.Header, reminder.Body, timeDiff, tokenSource.Token);
		}
	}
	public async Task RunAllNotifications()
	{
		var reminderCollection = handler_VM.GetUserReminders();
		foreach(var note in reminderCollection)
		{
			await RunNotification((Reminder_VM)note);
		}
	}
}