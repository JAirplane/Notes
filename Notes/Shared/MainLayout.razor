@inherits LayoutComponentBase

@inject UserState authState
@inject NavigationManager navManager
@inject INotificationHandler notificationHandler

<PageTitle>Notes</PageTitle>

<CascadingValue Value="this">
	<div class="page">
		<div class="sidebar">
			<NavMenu />
		</div>

		<main>
			<div class="top-row px-4">
				<button class="btn btn-outline-secondary" @onclick="SignOut">Sign out</button>
			</div>

			<article class="content px-4">
				@Body
			</article>
		</main>
	</div>
	<Notification @ref=notification NotificationPermitted=@authState.NotificationPermission />
</CascadingValue>

@code{
	private Notification? notification;
	private AuthenticatedUserHandler_VM? _handler_VM;
	[Inject]
	public AuthenticatedUserHandler_VM handler_VM
	{
		get => _handler_VM ?? throw new Exception("AuthenticatedUserHandler_VM is null");
		set => _handler_VM = value ?? throw new Exception("AuthenticatedUserHandler_VM is null");
	}
	protected override void OnAfterRender(bool firstRender)
	{
		if (firstRender)
		{
			if(notification is not null)
			{
				notificationHandler.ShowNotification = notification.ShowSimpeNotification;
			}
			var reminderCollection = handler_VM.GetUserReminders();
			foreach (var note in reminderCollection)
			{
				notificationHandler.RunNotification((Reminder_VM)note);
			}
		}
	}
	public void SignOut()
	{
		authState.UserLoggedIn = false;
		handler_VM.NullifyUser();
		navManager.NavigateTo("/");
	}
}